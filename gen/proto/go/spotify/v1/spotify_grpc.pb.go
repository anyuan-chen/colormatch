// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: spotify/v1/spotify.proto

package spotifyv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpotifyImageColorMatchingServiceClient is the client API for SpotifyImageColorMatchingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpotifyImageColorMatchingServiceClient interface {
	GetColorMetadataForAlbum(ctx context.Context, in *GetColorMetadataForAlbumRequest, opts ...grpc.CallOption) (*GetColorMetadataForAlbumResponse, error)
	GetColorMetadataForArtist(ctx context.Context, in *GetColorMetadataForArtistRequest, opts ...grpc.CallOption) (*GetColorMetadataForArtistResponse, error)
}

type spotifyImageColorMatchingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpotifyImageColorMatchingServiceClient(cc grpc.ClientConnInterface) SpotifyImageColorMatchingServiceClient {
	return &spotifyImageColorMatchingServiceClient{cc}
}

func (c *spotifyImageColorMatchingServiceClient) GetColorMetadataForAlbum(ctx context.Context, in *GetColorMetadataForAlbumRequest, opts ...grpc.CallOption) (*GetColorMetadataForAlbumResponse, error) {
	out := new(GetColorMetadataForAlbumResponse)
	err := c.cc.Invoke(ctx, "/spotify.v1.SpotifyImageColorMatchingService/GetColorMetadataForAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotifyImageColorMatchingServiceClient) GetColorMetadataForArtist(ctx context.Context, in *GetColorMetadataForArtistRequest, opts ...grpc.CallOption) (*GetColorMetadataForArtistResponse, error) {
	out := new(GetColorMetadataForArtistResponse)
	err := c.cc.Invoke(ctx, "/spotify.v1.SpotifyImageColorMatchingService/GetColorMetadataForArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpotifyImageColorMatchingServiceServer is the server API for SpotifyImageColorMatchingService service.
// All implementations should embed UnimplementedSpotifyImageColorMatchingServiceServer
// for forward compatibility
type SpotifyImageColorMatchingServiceServer interface {
	GetColorMetadataForAlbum(context.Context, *GetColorMetadataForAlbumRequest) (*GetColorMetadataForAlbumResponse, error)
	GetColorMetadataForArtist(context.Context, *GetColorMetadataForArtistRequest) (*GetColorMetadataForArtistResponse, error)
}

// UnimplementedSpotifyImageColorMatchingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSpotifyImageColorMatchingServiceServer struct {
}

func (UnimplementedSpotifyImageColorMatchingServiceServer) GetColorMetadataForAlbum(context.Context, *GetColorMetadataForAlbumRequest) (*GetColorMetadataForAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColorMetadataForAlbum not implemented")
}
func (UnimplementedSpotifyImageColorMatchingServiceServer) GetColorMetadataForArtist(context.Context, *GetColorMetadataForArtistRequest) (*GetColorMetadataForArtistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColorMetadataForArtist not implemented")
}

// UnsafeSpotifyImageColorMatchingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpotifyImageColorMatchingServiceServer will
// result in compilation errors.
type UnsafeSpotifyImageColorMatchingServiceServer interface {
	mustEmbedUnimplementedSpotifyImageColorMatchingServiceServer()
}

func RegisterSpotifyImageColorMatchingServiceServer(s grpc.ServiceRegistrar, srv SpotifyImageColorMatchingServiceServer) {
	s.RegisterService(&SpotifyImageColorMatchingService_ServiceDesc, srv)
}

func _SpotifyImageColorMatchingService_GetColorMetadataForAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColorMetadataForAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotifyImageColorMatchingServiceServer).GetColorMetadataForAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spotify.v1.SpotifyImageColorMatchingService/GetColorMetadataForAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotifyImageColorMatchingServiceServer).GetColorMetadataForAlbum(ctx, req.(*GetColorMetadataForAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotifyImageColorMatchingService_GetColorMetadataForArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColorMetadataForArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotifyImageColorMatchingServiceServer).GetColorMetadataForArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spotify.v1.SpotifyImageColorMatchingService/GetColorMetadataForArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotifyImageColorMatchingServiceServer).GetColorMetadataForArtist(ctx, req.(*GetColorMetadataForArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpotifyImageColorMatchingService_ServiceDesc is the grpc.ServiceDesc for SpotifyImageColorMatchingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpotifyImageColorMatchingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spotify.v1.SpotifyImageColorMatchingService",
	HandlerType: (*SpotifyImageColorMatchingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetColorMetadataForAlbum",
			Handler:    _SpotifyImageColorMatchingService_GetColorMetadataForAlbum_Handler,
		},
		{
			MethodName: "GetColorMetadataForArtist",
			Handler:    _SpotifyImageColorMatchingService_GetColorMetadataForArtist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spotify/v1/spotify.proto",
}
