// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: colors/v1/color.proto

package colorsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaletteMatchingServiceClient is the client API for PaletteMatchingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaletteMatchingServiceClient interface {
	MatchColor(ctx context.Context, in *MatchColorRequest, opts ...grpc.CallOption) (*MatchColorResponse, error)
}

type paletteMatchingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaletteMatchingServiceClient(cc grpc.ClientConnInterface) PaletteMatchingServiceClient {
	return &paletteMatchingServiceClient{cc}
}

func (c *paletteMatchingServiceClient) MatchColor(ctx context.Context, in *MatchColorRequest, opts ...grpc.CallOption) (*MatchColorResponse, error) {
	out := new(MatchColorResponse)
	err := c.cc.Invoke(ctx, "/colors.v1.PaletteMatchingService/MatchColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaletteMatchingServiceServer is the server API for PaletteMatchingService service.
// All implementations should embed UnimplementedPaletteMatchingServiceServer
// for forward compatibility
type PaletteMatchingServiceServer interface {
	MatchColor(context.Context, *MatchColorRequest) (*MatchColorResponse, error)
}

// UnimplementedPaletteMatchingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPaletteMatchingServiceServer struct {
}

func (UnimplementedPaletteMatchingServiceServer) MatchColor(context.Context, *MatchColorRequest) (*MatchColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchColor not implemented")
}

// UnsafePaletteMatchingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaletteMatchingServiceServer will
// result in compilation errors.
type UnsafePaletteMatchingServiceServer interface {
	mustEmbedUnimplementedPaletteMatchingServiceServer()
}

func RegisterPaletteMatchingServiceServer(s grpc.ServiceRegistrar, srv PaletteMatchingServiceServer) {
	s.RegisterService(&PaletteMatchingService_ServiceDesc, srv)
}

func _PaletteMatchingService_MatchColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaletteMatchingServiceServer).MatchColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colors.v1.PaletteMatchingService/MatchColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaletteMatchingServiceServer).MatchColor(ctx, req.(*MatchColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaletteMatchingService_ServiceDesc is the grpc.ServiceDesc for PaletteMatchingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaletteMatchingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colors.v1.PaletteMatchingService",
	HandlerType: (*PaletteMatchingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MatchColor",
			Handler:    _PaletteMatchingService_MatchColor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "colors/v1/color.proto",
}
